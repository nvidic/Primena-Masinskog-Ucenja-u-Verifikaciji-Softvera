( da li program ima ili nema grešku)
Blanko viska
- obrisan

numeric je cini mi se visak, jer se svuda pojavljuje?
- Pre navodjenja atributa je dodato da ih je sedamnaest tipa numeric,
a posle je numeric obrisano:
   Sedamnaest atributa tipa \textit{numeric} se odnosi na razne karakteristike koda,
   a osamnaesti je atribut klase (da li program ima ili nema grešku)

L i V se koriste u formulama a prethodno nisu uvedeni
- samo su se sakrili :)
- zamenio sam redosled pa bi trebalo da su uocljiviji

algoritmima k najbližih suseda ---> $k$
- zamenjeno

Slika 4.1: Primer arff fajla
Nije dobro da su na slici crvenim podvucene sintaksne greske, tj reci na srpskom
- zamenjeno

Sada sam zapravo shvaitla da ste Vi meni rekli da pogledam 4.3 i 4.4...
Prema tome, preskacem sada ovaj deo i citam to sto ste rekli da citam :-)

------------------------------
4.3
------------------------------
C programa --- programa napisanog u programskom jeziku C.
- zamenjeno

Preciznije, u pitanju su četiri atributa
koda: broj jedinstvenih operatora, broj jedinstvenih operanada, ukupan broj
operatora i ukupan broj operanada.
Sudeci po definicijama, ovo nisu operatori i operandi na onaj nacin kako sto se to
definise u programskom jeziku vec su to siri pojmovi koji obuhvataju i neke druge
stvari. Zato to ovde treba pomenuti i najaviti, da ne bi bilo zbunjivanja.
- zamenjeno
- Ove metrike se zasnivaju na broju operatora i broju operanada izvornog koda
(operatori i operandi o kojima je ovde reč nisu definisani na onaj način kako se operatori i
operandi definišu u programskom jeziku, već su to širi pojmovi koji obuhvataju
i neke druge stvari). Preciznije, u pitanju su četiri atributa koda: broj
jedinstvenih operatora, broj jedinstvenih operanada, ukupan broj operatora i
ukupan broj operanada.

sve kljucne reci tj sve sto dolazi iz jezika treba pisati kao \texttt
- ispravljeno (nadam se sve)

Pomoću biblioteke pycparser moguće je na osnovu
pycparser treba svuda istaci na neki nacin
- istaknuto sa \textit{}

Imena klasa isto treba da budu \texttt
- ispravljeno (takodje nadam se sve)


------------------------------
4.4
------------------------------
pri čemu je memsafety konjukncija preostala tri svojstva. --- naglasiti memsafety
- zamenjeno \textit{memsafety}

prekoračenja označenih integera. --- brojeva
- zamenjeno

Ovakvi rezultati, koliko god bili obeshrabrujući, donekle imaju smisla.
--->
Ovakvi rezultati, koliko god bili obeshrabrujući, imaju smisla.
- zamenjeno

[
  Veoma je moguće da su programi korišćeni za obučavanje modela „pravi”, dok su programi
  Pretpostavljamo da su programi korišćeni za obučavanje modela zapravo preuzeti iz industrijskih aplikacija.
  I ovde bih sada navela sve sto je vezan za ovaj korpus, a posle sve sto je vezano za ovaj sa takmicenja.
  - zamenjeno

  korišćeni u evaluaciji „veštački” (specijalno napravljeni za takmičenje u verifikaciji) i
  korišćeni u evaluaciji specijalno napravljeni za takmičenje u verifikaciji i
  - zamenjeno

  kao takvi sadrže drugačije osobine i konstrukcije koje se ne mogu primeniti na „prave” programe.
  kao takvi sadrže drugačije osobine i konstrukcije koje se ne mogu primeniti na
  programe iz klase koja je koriscena za obucavanje.
  - zamenjeno

  Pored toga, programi korišćeni za obučavanje atributa su raznovrsni, ali
  su dati samo u obliku atributa te stoga njihov izgled ostaje nepoznat. Dodatno, za
  ove programe se može pretpostaviti da su uzeti iz suštinski različitih projekata
]
- preformulisano:
Ovakvi rezultati, koliko god bili obeshrabrujući, imaju smisla. Pretpostavka je da su programi
korišćeni za obučavanje modela zapravo preuzeti iz industrijskih aplikacija. Ovi programi su
raznovrsni, ali su dati samo u obliku atributa te stoga njihov izgled ostaje nepoznat.
Dodatno, za ove programe se može pretpostaviti da su uzeti iz suštinski različitih projekata.

Programi korišćeni u evaluaciji su specijalno napravljeni za takmičenje u verifikaciji i kao
takvi sadrže drugačije osobine i konstrukcije koje se ne mogu primeniti na programe iz klase
koja je korišćena za obučavanje. Programi korišćeni za evaluaciju su prilično homogeni.
Razlike između programa koji imaju i onih koji nemaju grešku su minimalne, kao na primer da jedan
program ima znak < a drugi >. Iz ovakvih razlika se ne može izvesti neki poseban zaključak osim
da u slučaju znaka < postoji greška, a u slučaju znaka > greška ne postoji. Takve informacije su
besmislene i neupotrebljive. Još jedan razlog za slabije ponašanje modela je priroda korišćenih
atributa. Oni se zasnivaju na linijama koda, komentara, broju operatora i broju operanada.
Iz tog ugla ne postoji nikakva razlika između dva programa, onog sa greškom i onog bez greške,
koji se razlikuju samo po tome što jedan ima karakter <, a drugi karakter >. Navedene razlike
su previše suptilne da bi bile uhvaćene metodama mašinskog učenja pa je u takvim situacijama
potrebno koristiti sofisticirane alate verifikacije softvera.


ima znak < a drugi >
bolje < i \leq
- Posto je \leq u programskom kodu <= tada naredne recenice ne bi bile tacne (zapravo treca):
Još jedan razlog za slabije ponašanje modela je priroda korišćenih
atributa. Oni se zasnivaju na linijama koda, komentara, broju operatora i broju operanada.
Iz tog ugla ne postoji nikakva razlika između dva programa, onog sa greškom i onog bez
greške, koji se razlikuju samo po tome što jedan ima karakter <, a drugi karakter >.

Mozda da promenimo primer tako da sadrzi npr. <= i == ?
